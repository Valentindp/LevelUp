package com.company;

import java.util.Scanner;

public class Main {

    static void AddTheQuestion(String Questions[][][], int NQ, String Question, String Answer1, String Descr1, String Answer2, String Descr2, String Answer3, String Descr3, String Answer4, String Descr4) {
        Questions[NQ][0][0] = Question;

        Questions[NQ][1][0] = Answer1;
        Questions[NQ][1][1] = Descr1;

        Questions[NQ][2][0] = Answer2;
        Questions[NQ][2][1] = Descr2;

        Questions[NQ][3][0] = Answer3;
        Questions[NQ][3][1] = Descr3;

        Questions[NQ][4][0] = Answer4;
        Questions[NQ][4][1] = Descr4;
    }

    static void CompleteTheQuestions(String Questions[][][]) {

        AddTheQuestion(Questions, 0, "1. Результатом работы Java компилятора является:",
                "1) Исполняемый код", "Для того чтобы программы работали на разных типах процессоров необходим промежуточный байт-код который выполняется в виртуальной машине Java",
                "2) Байт-код", "Правильно",
                "3) Набор xml файлов содержащих дальнейшие инструкции по интерпретации исходного кода", "В результате сразу получается байт-код", "", "");

        AddTheQuestion(Questions, 1, "2. Выберите правильное утверждение:",
                "1) В Java нестрогая типизация", "Для повышения надежности и выявления ошибок еще на стадии компиляции в Java принята строгая типизация",
                "2) В Java строгая типизация, но для отдельных участков кода возможно применять нестрогую типизацию", "В Java всегда строгая типизация",
                "3) В Java строгая типизация", "Правильно", "", "");

        AddTheQuestion(Questions, 2, "3. Выберите правильное утверждение:",
                "1) Любые идентификаторы являются регистрозависимыми", "Правильно",
                "2) Идентификаторы являются регистронезависимыми", "Все идентификаторы регистрозависимы",
                "3) Идентификаторы переменных регистрозависимы, классов нет", "Все идентификаторы регистрозависимы",
                "4) Регистронезависимыми являются только идентификаторы не входящих в стандартные библиотеки классов", "Все идентификаторы регистрозависимы");

        AddTheQuestion(Questions, 3, "4. Можно ли использовать ключевые слова в качестве имен переменных, классов и т.д:",
                "1) Да", "Ключевые слова нельзя использовать для идентификаторв, имен переменных, классов или методов",
                "2) Нет", "Правильно",
                "3) Можно только для имен статических методов", "Ключевые слова нельзя использовать для идентификаторв, имен переменных, классов или методов", "", "");

        AddTheQuestion(Questions, 4, "5. Выражение Double a = 1/2",
                "1) Будет скомпилировано и выполнено без ошибок", "Ошибка преобразования типов на этапе компиляции",
                "2) Ошибка на этапе компиляции", "Правильно",
                "3) Ошибка на этапе выполнения", "Ошибка преобразования типов на этапе компиляции", "", "");

        AddTheQuestion(Questions, 5, "6. Выражение Double a = 1.0/2",
                "1) Будет скомпилировано и выполнено без ошибок", "Правильно",
                "2) Ошибка на этапе компиляции", "Автоматичсекое преобразование типов в этом случае отработает корректно",
                "3) Ошибка на этапе выполнения", "Автоматичсекое преобразование типов в этом случае отработает корректно", "", "");

        AddTheQuestion(Questions, 6, "7. После выполнения строки кода boolean b; значение переменной b будет:",
                "1) true", "Пременную необходимо инициализировать",
                "2) null", "null не может у переменной с типом boolean",
                "3) false", "Пременную необходимо инициализировать",
                "4) Неинициализированная переменная", "Правильно");

        AddTheQuestion(Questions, 7, "8. Выберите правильное утверждение:",
                "1) При выходе из области действия переменной переменная уничтожается", "Правильно",
                "2) При выходе из области действия переменной переменная сохраняется", "Происходит уничтожение переменной",
                "3) При выходе из области действия уничтожаются только неинициализированные переменные", "Происходит уничтожение переменной",
                "4) Инициализированные переменные будут доступны при передаче управления этому блоку кода повторно", "Происходит уничтожение переменной");

        AddTheQuestion(Questions, 8, "9. Выберите правильное утверждение:",
                "1) В Java нет автоматического приведения типов, операцию приведения всегда следует проводить явно", "Возможно автоматическое преобразование",
                "2) В Java автоматическое приведение типов предусмотрено только для числовых типов", "Возможно не только для числовых типов",
                "3) В Java автоматическое приведение типов предусмотрено только при преобразовании строк в числа и обратно", "Возможно не только при преобразовании строк в числа и обратно",
                "4) В Java автоматическое приведение типов работает только если типы совместимы, и длина целевого типа больше длины исходного типа", "Правильно");

        AddTheQuestion(Questions, 9, "10. Выберите правильное утверждение:",
                "1) В Java допустимо создавать только массивы из простых типов", "Возможно создавать массивы любого типа",
                "2) В Java допустимо создавать массивы любого типа", "Правильно",
                "3) В Java допустимо создавать только массивы из простых типов и библиотечных классов", "Возможно создавать массивы любого типа",
                "4) В Java допустимо создавать массивы только числовых и строковых типов", "Возможно создавать массивы любого типа");

        AddTheQuestion(Questions, 10, "11. Выберите правильное утверждение:",
                "1) В двумерном массиве тип данных вложенных массивов может отличаться от типа данных основного массива", "В массиве могут быть данные только одного типа",
                "2) В Java недопустимо применение двумерных массивов", "Допустимо создавать многомерные массивы",
                "3) В двумерном массиве тип данных всех элементов может быть только один", "Правильно",
                "4) Двумерные массивы могут состоять только из элементов простых типов", "Возможно создавать массивы любого типа");

        AddTheQuestion(Questions, 11, "12. Арифметические операции в Java можно выполнять над следующими типами данных:",
                "1) Только числовые", "Не только числовые",
                "2) Числовые и  тип char", "Правильно",
                "3) Числовые, тип char и строки", "Арифметические операции к строкам неприменимы",
                "4) Над всеми простыми типами данных", "Не над всеми простыми типами");

        AddTheQuestion(Questions, 12, "13. Логическик рперации в Java выполняются:",
                "1) Над логическими типами", "Правильно",
                "2) Над логическими и целочисленными типами", "Только надо логическими типами",
                "3) Над всеми простыми типами", "Только надо логическими типами", "", "");

        AddTheQuestion(Questions, 13, "14. Выберите правильное утверждение:",
                "1) В Java возможно организовать бесконечный цикл", "Правильно",
                "2) В Java невозможно организовать бесконечный цикл, ошибка на этапе компиляции", "Возможно организовать бесконечный цикл",
                "3) В Java невозможно организовать бесконечный цикл, ошибка на этапе выполнения", "Возможно организовать бесконечный цикл", "", "");

        AddTheQuestion(Questions, 14, "15. В Java передача по ссылке в методы:",
                "1) Осуществима только для простых типов", "Для простых неосуществима",
                "2) Осуществима для всех типов", "Для простых неосуществима",
                "3) Неосуществима для простых типов", "Правильно",
                "4) Осуществима для числовых типов", "Для простых неосуществима");
    }

    static boolean AcceptTheAnswer(String Questions[][][], int NQ, int MA, String WA[][]) {

        Scanner scan = new Scanner(System.in);
        boolean ReturnValue = false;
        String ExceptionText = "Необходимо вводить числа от 1 до " + MA;

        boolean CA = false;
        while (!CA) {

            System.out.println("Введите номер ответа:");
            String answer = scan.next();

            try {
                int NA = new Integer(answer);

                if (NA >= 1 & NA <= MA) {
                    String AnswerDescr = Questions[NQ][NA][1];
                    if (AnswerDescr == "Правильно") {
                        ReturnValue = true;
                    } else {
                        WA[NQ][0] = "Неверный ответ " + NA + " на вопрос " + (NQ + 1) + " ";
                        WA[NQ][1] = AnswerDescr;
                    }
                    CA = true;
                } else {
                    System.out.println(ExceptionText);
                }
            } catch (NumberFormatException e) {
                System.out.println(ExceptionText);
            }
        }
        return ReturnValue;
    }

    static void AnswerTheQuestions(int NQ, String Questions[][][]) {

        int CA = 0; //correct answers
        int MA = 0; //max number of answers
        String WA[][] = new String[NQ][2]; //wrong answers
        //для неправильных ответов можно было бы использовать динамический массив, пока не проходили

        for (int i = 0; i < NQ; i++) {

            System.out.println(Questions[i][0][0]);
            System.out.println(Questions[i][1][0]);
            System.out.println(Questions[i][2][0]);
            System.out.println(Questions[i][3][0]);
            if (Questions[i][4][0] != "") {
                System.out.println(Questions[i][4][0]);
                MA = 4;
            } else {
                MA = 3;
            }

            if (AcceptTheAnswer(Questions, i, MA, WA)) {
                CA++;
            }
        }

        System.out.println("Правильных ответов " + CA);

        for (int i = 0; i < NQ; i++) {
            if (WA[i][0] != null) {
                System.out.println(WA[i][0] + WA[i][1]);
            }
        }
    }

    public static void main(String[] args) {

        int NQ = 15; //number questions

        String Questions[][][] = new String[NQ][5][2];
        //для вопросов можно было создать свой класс, т.к. не проходили то запилим всё в 3-х мерный массив
        CompleteTheQuestions(Questions);
        AnswerTheQuestions(NQ, Questions);

    }
}
